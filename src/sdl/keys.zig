const c = @import("../lib.zig").c;

pub const Keysym = struct {
    const Self = @This();

    scancode: Scancode,
    keycode: Keycode,
    keymod: Keymod,

    pub fn from(raw: c.SDL_Keysym) Self {
        return Self{
            .scancode = @enumFromInt(raw.scancode),
            .keycode = @enumFromInt(raw.sym),
            .keymod = @bitCast(raw.mod),
        };
    }
};

pub const Scancode = enum(c_int) {
    a = 4,
    b = 5,
    c = 6,
    d = 7,
    e = 8,
    f = 9,
    g = 10,
    h = 11,
    i = 12,
    j = 13,
    k = 14,
    l = 15,
    m = 16,
    n = 17,
    o = 18,
    p = 19,
    q = 20,
    r = 21,
    s = 22,
    t = 23,
    u = 24,
    v = 25,
    w = 26,
    x = 27,
    y = 28,
    z = 29,
    @"1" = 30,
    @"2" = 31,
    @"3" = 32,
    @"4" = 33,
    @"5" = 34,
    @"6" = 35,
    @"7" = 36,
    @"8" = 37,
    @"9" = 38,
    @"0" = 39,
    @"return" = 40,
    escape = 41,
    backspace = 42,
    tab = 43,
    space = 44,
    minus = 45,
    equals = 46,
    leftbracket = 47,
    rightbracket = 48,
    backslash = 49,
    nonushash = 50,
    semicolon = 51,
    apostrophe = 52,
    grave = 53,
    comma = 54,
    period = 55,
    slash = 56,
    capslock = 57,
    f1 = 58,
    f2 = 59,
    f3 = 60,
    f4 = 61,
    f5 = 62,
    f6 = 63,
    f7 = 64,
    f8 = 65,
    f9 = 66,
    f10 = 67,
    f11 = 68,
    f12 = 69,
    printscreen = 70,
    scrolllock = 71,
    pause = 72,
    insert = 73,
    home = 74,
    pageup = 75,
    delete = 76,
    end = 77,
    pagedown = 78,
    right = 79,
    left = 80,
    down = 81,
    up = 82,
    numlockclear = 83,
    kp_divide = 84,
    kp_multiply = 85,
    kp_minus = 86,
    kp_plus = 87,
    kp_enter = 88,
    kp_1 = 89,
    kp_2 = 90,
    kp_3 = 91,
    kp_4 = 92,
    kp_5 = 93,
    kp_6 = 94,
    kp_7 = 95,
    kp_8 = 96,
    kp_9 = 97,
    kp_0 = 98,
    kp_period = 99,
    nonusbackslash = 100,
    application = 101,
    power = 102,
    kp_equals = 103,
    f13 = 104,
    f14 = 105,
    f15 = 106,
    f16 = 107,
    f17 = 108,
    f18 = 109,
    f19 = 110,
    f20 = 111,
    f21 = 112,
    f22 = 113,
    f23 = 114,
    f24 = 115,
    execute = 116,
    help = 117,
    menu = 118,
    select = 119,
    stop = 120,
    again = 121,
    undo = 122,
    cut = 123,
    copy = 124,
    paste = 125,
    find = 126,
    mute = 127,
    volumeup = 128,
    volumedown = 129,
    kp_comma = 133,
    kp_equalsas400 = 134,
    international1 = 135,
    international2 = 136,
    international3 = 137,
    international4 = 138,
    international5 = 139,
    international6 = 140,
    international7 = 141,
    international8 = 142,
    international9 = 143,
    lang1 = 144,
    lang2 = 145,
    lang3 = 146,
    lang4 = 147,
    lang5 = 148,
    lang6 = 149,
    lang7 = 150,
    lang8 = 151,
    lang9 = 152,
    alterase = 153,
    sysreq = 154,
    cancel = 155,
    clear = 156,
    prior = 157,
    return2 = 158,
    separator = 159,
    out = 160,
    oper = 161,
    clearagain = 162,
    crsel = 163,
    exsel = 164,
    kp_00 = 176,
    kp_000 = 177,
    thousandsseparator = 178,
    decimalseparator = 179,
    currencyunit = 180,
    currencysubunit = 181,
    kp_leftparen = 182,
    kp_rightparen = 183,
    kp_leftbrace = 184,
    kp_rightbrace = 185,
    kp_tab = 186,
    kp_backspace = 187,
    kp_a = 188,
    kp_b = 189,
    kp_c = 190,
    kp_d = 191,
    kp_e = 192,
    kp_f = 193,
    kp_xor = 194,
    kp_power = 195,
    kp_percent = 196,
    kp_less = 197,
    kp_greater = 198,
    kp_ampersand = 199,
    kp_dblampersand = 200,
    kp_verticalbar = 201,
    kp_dblverticalbar = 202,
    kp_colon = 203,
    kp_hash = 204,
    kp_space = 205,
    kp_at = 206,
    kp_exclam = 207,
    kp_memstore = 208,
    kp_memrecall = 209,
    kp_memclear = 210,
    kp_memadd = 211,
    kp_memsubtract = 212,
    kp_memmultiply = 213,
    kp_memdivide = 214,
    kp_plusminus = 215,
    kp_clear = 216,
    kp_clearentry = 217,
    kp_binary = 218,
    kp_octal = 219,
    kp_decimal = 220,
    kp_hexadecimal = 221,
    lctrl = 224,
    lshift = 225,
    lalt = 226,
    lgui = 227,
    rctrl = 228,
    rshift = 229,
    ralt = 230,
    rgui = 231,
    mode = 257,
    audionext = 258,
    audioprev = 259,
    audiostop = 260,
    audioplay = 261,
    audiomute = 262,
    mediaselect = 263,
    www = 264,
    mail = 265,
    calculator = 266,
    computer = 267,
    ac_search = 268,
    ac_home = 269,
    ac_back = 270,
    ac_forward = 271,
    ac_stop = 272,
    ac_refresh = 273,
    ac_bookmarks = 274,
    brightnessdown = 275,
    brightnessup = 276,
    displayswitch = 277,
    kbdillumtoggle = 278,
    kbdillumdown = 279,
    kbdillumup = 280,
    eject = 281,
    sleep = 282,
    app1 = 283,
    app2 = 284,
    audiorewind = 285,
    audiofastforward = 286,
};

pub const Keycode = enum(c_int) {
    @"return" = '\r',
    escape = '\x1b',
    backspace = '\x08',
    tab = '\t',
    space = ' ',
    exclaim = '!',
    quotedbl = '"',
    hash = '#',
    percent = '%',
    dollar = '$',
    ampersand = '&',
    quote = '\'',
    leftparen = '(',
    rightparen = ')',
    asterisk = '*',
    plus = '+',
    comma = ',',
    minus = '-',
    period = '.',
    slash = '/',
    @"0" = '0',
    @"1" = '1',
    @"2" = '2',
    @"3" = '3',
    @"4" = '4',
    @"5" = '5',
    @"6" = '6',
    @"7" = '7',
    @"8" = '8',
    @"9" = '9',
    colon = ':',
    semicolon = ';',
    less = '<',
    equals = '=',
    greater = '>',
    question = '?',
    at = '@',
    leftbracket = '[',
    backslash = '\\',
    rightbracket = ']',
    caret = '^',
    underscore = '_',
    backquote = '`',
    a = 'a',
    b = 'b',
    c = 'c',
    d = 'd',
    e = 'e',
    f = 'f',
    g = 'g',
    h = 'h',
    i = 'i',
    j = 'j',
    k = 'k',
    l = 'l',
    m = 'm',
    n = 'n',
    o = 'o',
    p = 'p',
    q = 'q',
    r = 'r',
    s = 's',
    t = 't',
    u = 'u',
    v = 'v',
    w = 'w',
    x = 'x',
    y = 'y',
    z = 'z',
    capslock = mapped(.capslock),
    f1 = mapped(.f1),
    f2 = mapped(.f2),
    f3 = mapped(.f3),
    f4 = mapped(.f4),
    f5 = mapped(.f5),
    f6 = mapped(.f6),
    f7 = mapped(.f7),
    f8 = mapped(.f8),
    f9 = mapped(.f9),
    f10 = mapped(.f10),
    f11 = mapped(.f11),
    f12 = mapped(.f12),
    printscreen = mapped(.printscreen),
    scrolllock = mapped(.scrolllock),
    pause = mapped(.pause),
    insert = mapped(.insert),
    home = mapped(.home),
    pageup = mapped(.pageup),
    delete = '\x7f',
    end = mapped(.end),
    pagedown = mapped(.pagedown),
    right = mapped(.right),
    left = mapped(.left),
    down = mapped(.down),
    up = mapped(.up),
    numlockclear = mapped(.numlockclear),
    kp_divide = mapped(.kp_divide),
    kp_multiply = mapped(.kp_multiply),
    kp_minus = mapped(.kp_minus),
    kp_plus = mapped(.kp_plus),
    kp_enter = mapped(.kp_enter),
    kp_1 = mapped(.kp_1),
    kp_2 = mapped(.kp_2),
    kp_3 = mapped(.kp_3),
    kp_4 = mapped(.kp_4),
    kp_5 = mapped(.kp_5),
    kp_6 = mapped(.kp_6),
    kp_7 = mapped(.kp_7),
    kp_8 = mapped(.kp_8),
    kp_9 = mapped(.kp_9),
    kp_0 = mapped(.kp_0),
    kp_period = mapped(.kp_period),
    application = mapped(.application),
    power = mapped(.power),
    kp_equals = mapped(.kp_equals),
    f13 = mapped(.f13),
    f14 = mapped(.f14),
    f15 = mapped(.f15),
    f16 = mapped(.f16),
    f17 = mapped(.f17),
    f18 = mapped(.f18),
    f19 = mapped(.f19),
    f20 = mapped(.f20),
    f21 = mapped(.f21),
    f22 = mapped(.f22),
    f23 = mapped(.f23),
    f24 = mapped(.f24),
    execute = mapped(.execute),
    help = mapped(.help),
    menu = mapped(.menu),
    select = mapped(.select),
    stop = mapped(.stop),
    again = mapped(.again),
    undo = mapped(.undo),
    cut = mapped(.cut),
    copy = mapped(.copy),
    paste = mapped(.paste),
    find = mapped(.find),
    mute = mapped(.mute),
    volumeup = mapped(.volumeup),
    volumedown = mapped(.volumedown),
    kp_comma = mapped(.kp_comma),
    kp_equalsas400 = mapped(.kp_equalsas400),
    alterase = mapped(.alterase),
    sysreq = mapped(.sysreq),
    cancel = mapped(.cancel),
    clear = mapped(.clear),
    prior = mapped(.prior),
    return2 = mapped(.return2),
    separator = mapped(.separator),
    out = mapped(.out),
    oper = mapped(.oper),
    clearagain = mapped(.clearagain),
    crsel = mapped(.crsel),
    exsel = mapped(.exsel),
    kp_00 = mapped(.kp_00),
    kp_000 = mapped(.kp_000),
    thousandsseparator = mapped(.thousandsseparator),
    decimalseparator = mapped(.decimalseparator),
    currencyunit = mapped(.currencyunit),
    currencysubunit = mapped(.currencysubunit),
    kp_leftparen = mapped(.kp_leftparen),
    kp_rightparen = mapped(.kp_rightparen),
    kp_leftbrace = mapped(.kp_leftbrace),
    kp_rightbrace = mapped(.kp_rightbrace),
    kp_tab = mapped(.kp_tab),
    kp_backspace = mapped(.kp_backspace),
    kp_a = mapped(.kp_a),
    kp_b = mapped(.kp_b),
    kp_c = mapped(.kp_c),
    kp_d = mapped(.kp_d),
    kp_e = mapped(.kp_e),
    kp_f = mapped(.kp_f),
    kp_xor = mapped(.kp_xor),
    kp_power = mapped(.kp_power),
    kp_percent = mapped(.kp_percent),
    kp_less = mapped(.kp_less),
    kp_greater = mapped(.kp_greater),
    kp_ampersand = mapped(.kp_ampersand),
    kp_dblampersand = mapped(.kp_dblampersand),
    kp_verticalbar = mapped(.kp_verticalbar),
    kp_dblverticalbar = mapped(.kp_dblverticalbar),
    kp_colon = mapped(.kp_colon),
    kp_hash = mapped(.kp_hash),
    kp_space = mapped(.kp_space),
    kp_at = mapped(.kp_at),
    kp_exclam = mapped(.kp_exclam),
    kp_memstore = mapped(.kp_memstore),
    kp_memrecall = mapped(.kp_memrecall),
    kp_memclear = mapped(.kp_memclear),
    kp_memadd = mapped(.kp_memadd),
    kp_memsubtract = mapped(.kp_memsubtract),
    kp_memmultiply = mapped(.kp_memmultiply),
    kp_memdivide = mapped(.kp_memdivide),
    kp_plusminus = mapped(.kp_plusminus),
    kp_clear = mapped(.kp_clear),
    kp_clearentry = mapped(.kp_clearentry),
    kp_binary = mapped(.kp_binary),
    kp_octal = mapped(.kp_octal),
    kp_decimal = mapped(.kp_decimal),
    kp_hexadecimal = mapped(.kp_hexadecimal),
    lctrl = mapped(.lctrl),
    lshift = mapped(.lshift),
    lalt = mapped(.lalt),
    lgui = mapped(.lgui),
    rctrl = mapped(.rctrl),
    rshift = mapped(.rshift),
    ralt = mapped(.ralt),
    rgui = mapped(.rgui),
    mode = mapped(.mode),
    audionext = mapped(.audionext),
    audioprev = mapped(.audioprev),
    audiostop = mapped(.audiostop),
    audioplay = mapped(.audioplay),
    audiomute = mapped(.audiomute),
    mediaselect = mapped(.mediaselect),
    www = mapped(.www),
    mail = mapped(.mail),
    calculator = mapped(.calculator),
    computer = mapped(.computer),
    ac_search = mapped(.ac_search),
    ac_home = mapped(.ac_home),
    ac_back = mapped(.ac_back),
    ac_forward = mapped(.ac_forward),
    ac_stop = mapped(.ac_stop),
    ac_refresh = mapped(.ac_refresh),
    ac_bookmarks = mapped(.ac_bookmarks),
    brightnessdown = mapped(.brightnessdown),
    brightnessup = mapped(.brightnessup),
    displayswitch = mapped(.displayswitch),
    kbdillumtoggle = mapped(.kbdillumtoggle),
    kbdillumdown = mapped(.kbdillumdown),
    kbdillumup = mapped(.kbdillumup),
    eject = mapped(.eject),
    sleep = mapped(.sleep),
    app1 = mapped(.app1),
    app2 = mapped(.app2),
    audiorewind = mapped(.audiorewind),
    audiofastforward = mapped(.audiofastforward),

    fn mapped(s: Scancode) c_int {
        return (1 << 30) | @intFromEnum(s);
    }
};

pub const Keymod = packed struct(u16) {
    lshift: bool,
    rshift: bool,
    _: u4,
    lctrl: bool,
    rctrl: bool,
    lalt: bool,
    ralt: bool,
    lgui: bool,
    rgui: bool,
    num: bool,
    caps: bool,
    mode: bool,
    reserved: bool,
};
